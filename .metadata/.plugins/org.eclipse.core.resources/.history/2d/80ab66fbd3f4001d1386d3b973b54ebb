package domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class Estacion {
	
	
	//Atributos
	private Integer id;
	private List<Bicicleta> bicicletas;
	

	//Constructores
	public Estacion(Integer numero) {
		this.id = numero;
		this.bicicletas = new ArrayList<>();
	}

	// Getters & Setters
	public Integer getNumero() {
		return id;
	}


	public void setNumero(Integer numero) {
		this.id = numero;
	}


	public List<Bicicleta> getBicicletas() {
		return bicicletas;
	}


	public void setBicicletas(List<Bicicleta> bicicletas) {
		this.bicicletas = bicicletas;
	}
	
	//Metodos
	public void addBicicleta(Bicicleta bicicleta) {
		this.bicicletas.add(bicicleta);
	}
	
	public Bicicleta buscarBicicleta(Bicicleta bicicleta) {
		Bicicleta resultado = null;
		if (this.bicicletas.contains(bicicleta)) {
			int indice = this.bicicletas.indexOf(bicicleta);
			if (indice > -1) {
				resultado = this.bicicletas.get(indice);
			}
		}
		return resultado;
	}
	
	public void mostrarBicicletas() {
		for (Bicicleta bicicleta : bicicletas) {
			System.out.println(bicicleta.toString());
		}
	}

	@Override
	public String toString() {
		return "Bicicleta [numero=" + id + ", bicicletas=" + bicicletas + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Estacion other = (Estacion) obj;
		return Objects.equals(id, other.id);
	}
	
	public int cantidadBicicletasDisponibles () {
		int bicicletasDisponibles = 0;
		for (Bicicleta bicicleta : bicicletas) {
			if (bicicleta.getEstado().equalsIgnoreCase(Bicicleta.getDisponible())) {
				bicicletasDisponibles += 1;
			}
		}
		return bicicletasDisponibles;
	}
	
	public int cantidadBicicletasEnUso () {
		int bicicletasEnUso = 0;
		for (Bicicleta bicicleta : bicicletas) {
			if (bicicleta.getEstado().equalsIgnoreCase(Bicicleta.getEnUso())) {
				bicicletasEnUso += 1;
			}
		}
		return bicicletasEnUso;
	}
	
	public int cantidadBicicletasEnReparacion () {
		int bicicletasEnReparacion = 0;
		for (Bicicleta bicicleta : bicicletas) {
			if (bicicleta.getEstado().equalsIgnoreCase(Bicicleta.getEnReparacion())) {
				bicicletasEnReparacion += 1;
			}
		}
		return bicicletasEnReparacion;
	}
	
}
